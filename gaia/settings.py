"""
Django settings for gaia project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import json
from pathlib import Path
import sys
from sys import platform

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

if platform == "linux":
    #GDAL_LIBRARY_PATH = '/anaconda/envs/gaia/lib/libgdal.so'
    GDAL_LIBRARY_PATH = os.getenv("GDAL_LIBRARY_PATH", "/opt/conda/envs/gaia/lib/libgdal.so")
    #GEOS_LIBRARY_PATH = '/anaconda/envs/gaia/lib/geos_c.so'
    SPATIALITE_LIBRARY_PATH = '/opt/conda/envs/gaia/lib/mod_spatialite.so'

elif platform == "win32":
    USER_HOME = os.path.expanduser("~")
    CONDA_PREFIX = os.environ.get("CONDA_PREFIX", "")    
    GDAL_LIBRARY_PATH = os.path.join(CONDA_PREFIX, 'Library', 'bin', 'gdal.dll')
    GEOS_LIBRARY_PATH = os.path.join(CONDA_PREFIX, 'Library', 'bin', 'geos_c.dll')
    SPATIALITE_LIBRARY_PATH = os.path.join(CONDA_PREFIX, 'Library', 'bin','mod_spatialite.dll')
else:
    print("YOUR PLATFORM IS NOT SUPPORTED AT THIS TIME!")

SECRETS_FILE = os.path.join(BASE_DIR, 'gaia/secrets.json')

# SECURITY WARNING: keep the secret key used in production secret!
with open(SECRETS_FILE) as f:
    secrets = json.load(f)

SECRET_KEY = secrets['DJANGO_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['dev-gaia.fisheries.noaa.gov',
                 '52.170.141.35',
                 '127.0.0.1',
                 'localhost',
                 'gaia*.happypond-d5fa406e.eastus.azurecontainerapps.io',
                 'gaia.happypond-d5fa406e.eastus.azurecontainerapps.io',]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'whale',
    #'django_q',
    #'corsheaders',
]

# Django Q Cluster

Q_CLUSTER = {
    'name': 'DjangoORM',
    'workers': 1,
    'orm': 'default',
    'retry': 3600,
    'timeout': 900,
    'catch_up': True,
    'sync': False,
    'max_attempts': 3,
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add this near the top
    #'cordsheaders.middleware.CorsMiddleware',
    #'django.middleware.common.CommonMiddleware',
]

ROOT_URLCONF = 'gaia.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gaia.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.spatialite',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/django_sqlite.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django.db.backends': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
    'formatters': {
        'verbose': {
            'format': '{asctime} {levelname} {message}',
            'style': '{',
        },
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/login/'
LONGIN_URL = '/login/'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Enable WhiteNoise storage for static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Azure details
CORS_ALLOW_ALL_ORIGINS = True

AZURE_STORAGE_ACCOUNT_NAME = 'gaianoaastorage'
AZURE_STORAGE_ACCOUNT_KEY = secrets['AZURE_KEY']
AZURE_CONTAINER_NAME = 'data'

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Avoid CSRF verfication failures
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8080',  # Add the origin used in your requests
    'https://dev-gaia.fisheries.noaa.gov',
    'http://dev-gaia.fisheries.noaa.gov'
]

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')